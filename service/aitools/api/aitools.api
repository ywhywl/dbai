syntax = "v1"

type RemoteCommandReq {
	HostIps string `json:"host_ips,omitempty"`
}
type RemoteCommandRespData {
	HostIp string `json:"host_ip"`
	Output string `json:"output,omitempty"`
}
type RemoteCommandResp {
	Successful bool                  `json:"successful,omitempty"`
	Data       RemoteCommandRespData `json:"data"`
}

// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：
// 1. 路由分组
// 2. 中间件声明
// 3. 路由前缀
// 4. 超时配置
// 5. jwt 鉴权开关
// 所有声明仅对当前 service 中的路由有效
@server (
	// 定义一个超时时长为 3 秒的超时配置，这里可填写为 time.Duration 的字符串形式，详情可参考
	// https://pkg.go.dev/time#Duration.String
	timeout: 300s
	group: aitools
	maxBytes: 104857600
	prefix: api/v1
)
// 定义一个名称为 user 的服务
service aitools_api {
	// 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler
	@handler getbackuplogbyhostsHandler
	// 定义接口
	// 请求方法为 post
	// 路由为 /user/info
	// 请求体为 GetUserInfoReq
	// 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰
	post /aitools/getbackuplogbyhosts (RemoteCommandReq) returns (RemoteCommandResp)
}