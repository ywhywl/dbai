// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: aitools.proto

package aitools

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AiToolsRpcClient is the client API for AiToolsRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiToolsRpcClient interface {
	SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error)
	RemoteCommand(ctx context.Context, in *RemoteCommandReq, opts ...grpc.CallOption) (*RemoteCommandResp, error)
}

type aiToolsRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAiToolsRpcClient(cc grpc.ClientConnInterface) AiToolsRpcClient {
	return &aiToolsRpcClient{cc}
}

func (c *aiToolsRpcClient) SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error) {
	out := new(SayHelloResp)
	err := c.cc.Invoke(ctx, "/aitools.AiTools_rpc/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiToolsRpcClient) RemoteCommand(ctx context.Context, in *RemoteCommandReq, opts ...grpc.CallOption) (*RemoteCommandResp, error) {
	out := new(RemoteCommandResp)
	err := c.cc.Invoke(ctx, "/aitools.AiTools_rpc/RemoteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiToolsRpcServer is the server API for AiToolsRpc service.
// All implementations must embed UnimplementedAiToolsRpcServer
// for forward compatibility
type AiToolsRpcServer interface {
	SayHello(context.Context, *SayHelloReq) (*SayHelloResp, error)
	RemoteCommand(context.Context, *RemoteCommandReq) (*RemoteCommandResp, error)
	mustEmbedUnimplementedAiToolsRpcServer()
}

// UnimplementedAiToolsRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAiToolsRpcServer struct {
}

func (UnimplementedAiToolsRpcServer) SayHello(context.Context, *SayHelloReq) (*SayHelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAiToolsRpcServer) RemoteCommand(context.Context, *RemoteCommandReq) (*RemoteCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteCommand not implemented")
}
func (UnimplementedAiToolsRpcServer) mustEmbedUnimplementedAiToolsRpcServer() {}

// UnsafeAiToolsRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiToolsRpcServer will
// result in compilation errors.
type UnsafeAiToolsRpcServer interface {
	mustEmbedUnimplementedAiToolsRpcServer()
}

func RegisterAiToolsRpcServer(s grpc.ServiceRegistrar, srv AiToolsRpcServer) {
	s.RegisterService(&AiToolsRpc_ServiceDesc, srv)
}

func _AiToolsRpc_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiToolsRpcServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitools.AiTools_rpc/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiToolsRpcServer).SayHello(ctx, req.(*SayHelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiToolsRpc_RemoteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiToolsRpcServer).RemoteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aitools.AiTools_rpc/RemoteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiToolsRpcServer).RemoteCommand(ctx, req.(*RemoteCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AiToolsRpc_ServiceDesc is the grpc.ServiceDesc for AiToolsRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiToolsRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aitools.AiTools_rpc",
	HandlerType: (*AiToolsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AiToolsRpc_SayHello_Handler,
		},
		{
			MethodName: "RemoteCommand",
			Handler:    _AiToolsRpc_RemoteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aitools.proto",
}
