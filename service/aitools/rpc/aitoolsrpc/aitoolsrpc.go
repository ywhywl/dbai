// Code generated by goctl. DO NOT EDIT!
// Source: aitools.proto

package aitoolsrpc

import (
	"context"

	"db_ai/service/aitools/rpc/types/aitools"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	RemoteCommandReq  = aitools.RemoteCommandReq
	RemoteCommandResp = aitools.RemoteCommandResp
	SayHelloReq       = aitools.SayHelloReq
	SayHelloResp      = aitools.SayHelloResp

	AiToolsRpc interface {
		SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error)
		RemoteCommand(ctx context.Context, in *RemoteCommandReq, opts ...grpc.CallOption) (*RemoteCommandResp, error)
	}

	defaultAiToolsRpc struct {
		cli zrpc.Client
	}
)

func NewAiToolsRpc(cli zrpc.Client) AiToolsRpc {
	return &defaultAiToolsRpc{
		cli: cli,
	}
}

func (m *defaultAiToolsRpc) SayHello(ctx context.Context, in *SayHelloReq, opts ...grpc.CallOption) (*SayHelloResp, error) {
	client := aitools.NewAiToolsRpcClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}

func (m *defaultAiToolsRpc) RemoteCommand(ctx context.Context, in *RemoteCommandReq, opts ...grpc.CallOption) (*RemoteCommandResp, error) {
	client := aitools.NewAiToolsRpcClient(m.cli.Conn())
	return client.RemoteCommand(ctx, in, opts...)
}
